const e={},t=function(t){const n=String(t).toLocaleLowerCase();return function(t){return`[object ${n}]`===e.toString.call(t).toLocaleLowerCase()}},n=t("Number"),r=t("Boolean"),o=t("String"),i=t("Null"),a=t("Object"),s=t("Undefined"),l=t("Function"),c=t("Array"),u=t("Date"),b=t("Error"),f=t("Function"),g=t("Symbol"),m=t("Math"),S=t("Json"),d={},y=["Number","Boolean","String","Null","Object","Undefined","Function","Array","Date","Error","Function","Symbol","Math","Json"];let L=0;for(;L<y.length;L+=1){const e=y[L],n=`is${e}`;Reflect.has(d,n)||Object.defineProperty(d,`is${e}`,{value:t(e),enumerable:!1,writable:!1})}var N={isNumber:n,isBoolean:r,isNull:i,isString:o,isObject:a,isUndefined:s,isFunction:l,isArray:c,isDate:u,isError:b,isRegExp:f,isSymbol:g,isMath:m,isJson:S,_:d,getTypes:function t(n){if(c(n))return n.map((t=>/\s+([a-zA-Z]+)/gi.exec(e.toString.call(t))[0].trim().toLocaleLowerCase()));return t([n])}};export{N as default};
